#include <iostream>
#include <GL/glew.h>
//maths headers
#include <glm/glm.hpp>
using glm::mat4;
using glm::vec4;
using glm::vec3;

#include <glm\gtc\matrix_transform.hpp>
#include <glm\gtc\type_ptr.hpp>

#ifdef __APPLE__
#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>
#include <OpenGL/glu.h>
#include <CoreFoundation/CoreFoundation.h>
#include <SDL2_ttf/SDL_ttf.h>
#include <SDL2_image/SDL_image.h>
#elif WIN32
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <gl/GLU.h>
#endif

#include <vector>


#include "GameObject.h"
#include "ScreenManager.h"
#include "SplashScreen.h"
#include "TitleScreen.h"

SplashScreen* splashScreen;
GameObject* newScreen;


//SDL Window
SDL_Window * window = NULL;
//SDL GL Context
SDL_GLContext glcontext = NULL;

//Window Width
const int WINDOW_WIDTH = 1024;
//Window Height
const int WINDOW_HEIGHT = 768;
//Window name
const char *WINDOW_NAME;

bool running = true;
bool windowIsOpen = false;

//Checks through opengl to make sure their is no errors
void CheckForErrors()
{
	GLenum error;
	do{
		error = glGetError();
	} while (error != GL_NO_ERROR);
}

//Cleans up all the libraries being used
void CleanUp()
{
	// clean up, reverse order!!!
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	IMG_Quit();
	TTF_Quit();
	SDL_Quit();
}

//Function to initialise OpenGL
void initOpenGL()
{
	//Ask for version 3.2 of OpenGL
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

	//Create OpenGL Context
	glcontext = SDL_GL_CreateContext(window);

	glewExperimental = GL_TRUE;
	GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		/* Problem: glewInit failed, something is seriously wrong. */
		std::cout << "Error: " << glewGetErrorString(err) << std::endl;
	}

	//Smooth shading
	glShadeModel(GL_SMOOTH);

	//clear the background to black
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	//Clear the depth buffer
	glClearDepth(1.0f);

	//Enable depth testing
	glEnable(GL_DEPTH_TEST);

	//The depth test to go
	glDepthFunc(GL_LEQUAL);

	//Turn on best perspective correction
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
}

//Function to set/reset viewport
void setViewport(int width, int height)
{

	//make sure height is always above 1
	if (height == 0) {
		height = 1;
	}


	//Setup viewport
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);
}


void InitWindow(const char *name,int width, int height, bool fullscreen)
{
	//Create a window
	window = SDL_CreateWindow(
		name,             // window title
		SDL_WINDOWPOS_CENTERED,     // x position, centered
		SDL_WINDOWPOS_CENTERED,     // y position, centered
		width,                        // width, in pixels
		height,                        // height, in pixels
		SDL_WINDOW_OPENGL           // flags
		);
	windowIsOpen = true;
}

//Main Method
int main(int argc, char * arg[])
{
    // init everyting - SDL, if it is nonzero we have a problem
    if(SDL_Init(SDL_INIT_EVERYTHING) != 0)
    {
        std::cout << "ERROR SDL_Init " <<SDL_GetError()<< std::endl;
        
        return -1;
    }
    
	int imageInitFlags = IMG_INIT_JPG | IMG_INIT_PNG;
	int returnInitFlags = IMG_Init(imageInitFlags);
	if (((returnInitFlags) & (imageInitFlags)) != imageInitFlags) {
		std::cout << "ERROR SDL_Image Init " << IMG_GetError() << std::endl;
		// handle error
	}

	if (TTF_Init() == -1) {
		std::cout << "TTF_Init: " << TTF_GetError();
	}

	//Assigns window name
	WINDOW_NAME = "Main Menu";
	//Intializes/creates new window
	InitWindow(WINDOW_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, false);

	//Call our InitOpenGL Function
	initOpenGL();


	CheckForErrors(); //causing an issue atm

	//Set our viewport
	setViewport(WINDOW_WIDTH, WINDOW_HEIGHT);


	//Value to hold the event generated by SDL
	SDL_Event event;
	bool isPressed = false;

	//Calls the intiailize method for the approprate screen.
	ScreenManager::getInstance().Initialize();
	//Calls the LoadContent method for the approprate screen.
	ScreenManager::getInstance().LoadContent();

	//run whilst the window is open
	while (windowIsOpen){
		//check for any events
		while (SDL_PollEvent(&event)) {

			//if any events of type
			switch (event.type){
			case SDL_KEYDOWN:  //key down related events
				switch (event.key.keysym.sym){   //what type of key down keys

				case SDLK_ESCAPE:
					windowIsOpen = false;
					break;

				case SDLK_1:
					if (isPressed == false){
						SDL_DestroyWindow(window);

						WINDOW_NAME = "GAME"; //assigns new window name
						InitWindow(WINDOW_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, false); //intializes/creates new window.

						initOpenGL();	//re-intializes initOpenGl
						CheckForErrors(); //causing an issue atm
						setViewport(WINDOW_WIDTH, WINDOW_HEIGHT); //reset the viewport

						ScreenManager::getInstance().AddScreen(new SplashScreen); //assigns a new game screen to be the current screen to be displayed

						isPressed = true; //makes sure the sure can't open multiple instances of the windows
					}
					break;

				}
			}
			ScreenManager::getInstance().UpdateInput(event); //updates the keyboard movement for active screen
		}
		ScreenManager::getInstance().Update(event); //updates the screens main methods and events
		ScreenManager::getInstance().render(window); //renders everything for this screen 
	}

	ScreenManager::getInstance().cleanUp(); //cleans up the currentScreen 

	CleanUp(); //cleans up the rest 

	return 0;
}